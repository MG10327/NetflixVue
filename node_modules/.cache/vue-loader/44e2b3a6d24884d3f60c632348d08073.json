{"remainingRequest":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\src\\components\\MainNavigation.vue?vue&type=template&id=c5e56f46&scoped=true&","dependencies":[{"path":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\src\\components\\MainNavigation.vue","mtime":1573528408934},{"path":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sande\\Downloads\\My Sites and Templates\\netflix_vue\\netflixvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}